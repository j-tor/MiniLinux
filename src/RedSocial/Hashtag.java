/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package RedSocial;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;


public class Hashtag extends javax.swing.JPanel {

    /**
     * Creates new form Hashtag
     */
    
    private ArrayList<String[]> twits;
    private Func_usuario adm_usr;
    
    public Hashtag(Func_usuario adm_usr) throws IOException {
        initComponents();
        
        this.adm_usr = adm_usr;
    }

    
    
    private void cargarTwits(String[] tag) throws IOException, FileNotFoundException, NoExisteUsr{
        
        content.removeAll();
        content.setLayout(new FlowLayout(FlowLayout.LEADING,0,0));
        
        
        
        twits = adm_usr.buscarHashTag(tag);
        
        if (!twits.isEmpty()) {

            Model_msg[] twits_p = new Model_msg[twits.size()];

            for (int i = 0; i < twits_p.length; i++) {

                String[] mensaje = twits.get(i);

                Func_usuario tmp = new Func_usuario(mensaje[0]);

                //formato de fecha
                Calendar fecha = Calendar.getInstance();
                fecha.setTimeInMillis(Long.parseLong(mensaje[2]));

                String fecha_f = String.format("%d/%d/%d       %d:%02d %s", fecha.get(Calendar.DATE),
                        fecha.get(Calendar.MONTH), fecha.get(Calendar.YEAR), fecha.get(Calendar.HOUR),
                        fecha.get(Calendar.MINUTE), ((fecha.get(Calendar.AM_PM) == 0) ? "am" : "pm"));

                BufferedImage newImage = new BufferedImage(
                        tmp.getImg_perfil().getWidth(null),
                        tmp.getImg_perfil().getHeight(null),
                        BufferedImage.TYPE_INT_ARGB);

                Graphics2D graphics = newImage.createGraphics();
                graphics.drawImage(tmp.getImg_perfil(), 0, 0, null);
                graphics.dispose();

                Image img = newImage.getScaledInstance(40, 40, Image.SCALE_DEFAULT);

                twits_p[i] = new Model_msg(new ImageIcon(img), mensaje[1],
                        tmp.getUser(), fecha_f);

                content.setPreferredSize(new Dimension(1040, (i + 1) * 125));

                content.add(twits_p[i]);

                content.revalidate();
                content.repaint();

                content_scroll.revalidate();
                content_scroll.repaint();
                
                JScrollBar barra = content_scroll.getVerticalScrollBar();
                barra.setValue(barra.getMaximum());
                content_scroll.repaint();
                
                this.repaint();
            }

        } else {
            ImageIcon vacio_icon = new ImageIcon("varios/icon_vacio.png");

            Model_msg a = new Model_msg(vacio_icon, "Ni una coincidencia", "", "");
            content.add(a);
        }


        background.revalidate();
        background.repaint();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        txtHashtag = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        content_scroll = new javax.swing.JScrollPane();
        content = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(910, 720));

        background.setMinimumSize(new java.awt.Dimension(910, 720));
        background.setPreferredSize(new java.awt.Dimension(910, 720));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtHashtag.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtHashtag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHashtagActionPerformed(evt);
            }
        });
        txtHashtag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHashtagKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHashtagKeyReleased(evt);
            }
        });
        background.add(txtHashtag, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 760, 31));
        background.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 830, 20));

        jLabel1.setText("jLabel1");
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 70, 51));

        content_scroll.setBorder(null);
        content_scroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        content_scroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        content_scroll.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        content_scroll.setMaximumSize(new java.awt.Dimension(880, 32767));
        content_scroll.setMinimumSize(new java.awt.Dimension(880, 740));
        content_scroll.setPreferredSize(new java.awt.Dimension(880, 740));
        content_scroll.setRequestFocusEnabled(false);

        content.setAutoscrolls(true);
        content.setMaximumSize(new java.awt.Dimension(880, 32767));
        content.setMinimumSize(new java.awt.Dimension(880, 0));
        content.setName(""); // NOI18N
        content.setPreferredSize(new java.awt.Dimension(880, 740));

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 880, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
        );

        content_scroll.setViewportView(content);

        background.add(content_scroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 880, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtHashtagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHashtagActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHashtagActionPerformed

    private void txtHashtagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHashtagKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtHashtagKeyPressed

    private void txtHashtagKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHashtagKeyReleased
        try {
            // TODO add your handling code here:

            String txt = txtHashtag.getText();

            //elimina el primer # para que no me genere un hash vacio
            if (txt.length() > 0){
                
                String[] hashs = txt.split(" ");
                
                //posbles hash para buscar
                ArrayList<String> pos_hash = new ArrayList<>();
                
                for (int i = 0; i < hashs.length; i++) {
                    if(hashs[i].length() > 0){
                        pos_hash.add("#" + hashs[i]);
                    }
                    
                }
                
                String[] temp = new String[pos_hash.size()];
                for (int i = 0; i < temp.length; i++) {
                    temp[i] = pos_hash.get(i);
                }
            
                cargarTwits(temp);
            }

        } catch (FileNotFoundException | NoExisteUsr ex) {
            JOptionPane.showMessageDialog(null, "Error " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_txtHashtagKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JPanel content;
    private javax.swing.JScrollPane content_scroll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtHashtag;
    // End of variables declaration//GEN-END:variables
}
